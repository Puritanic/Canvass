const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
require('dotenv').config();
// Pull schema from mongoose
const User = mongoose.model('users');

passport.serializeUser((user, done) => {
  // This is not google profile id, its id generated by MongoDB
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

passport.use(new GoogleStrategy(
  {
    clientID: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    // Url for the user to be redirected after auth permission is granted
    // https://stackoverflow.com/a/33013835/7453363 -.-
    callbackURL: '/auth/google/callback',
    // relative path in this callback will cause google redirect url to fallback to http instead of using https, proxy: true resolves this
    proxy: true
  },
  (accessToken, refreshToken, profile, done) => {
    User.findOne({ googleID: profile.id }).then((existingUser) => {
      if (existingUser) {
        // We already have the user in the DB, continue with the Auth flow by calling done()
        // we need to provide two args: err obj and user record
        done(null, existingUser);
      }
      // We don't have user, create a new entry in the DB
      // then call done with the info about newly created user
      new User({ googleID: profile.id })
        .save()
        .then(user => done(null, user));
    });
  }
));
